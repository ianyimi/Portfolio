/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, {useEffect, useRef} from 'react'
import {useGLTF, useAnimations} from '@react-three/drei'
import {GLTF} from 'three/examples/jsm/loaders/GLTFLoader'
import {useStore} from "@/utils/store";
import {motion as Motion} from "framer-motion-3d";

type GLTFResult = GLTF & {
  nodes: {
    door_left_1: THREE.Mesh
    door_left_2: THREE.Mesh
    door_right_1: THREE.Mesh
    door_right_2: THREE.Mesh
    chassis_1: THREE.Mesh
    chassis_2: THREE.Mesh
    chassis_3: THREE.Mesh
    chassis001: THREE.Mesh
    chassis001_1: THREE.Mesh
    chassis002: THREE.Mesh
    chassis002_1: THREE.Mesh
    wheel_bl: THREE.Mesh
    wheel_fr: THREE.Mesh
    wheel_fl: THREE.Mesh
    wheel_br: THREE.Mesh
    door_leftwindow: THREE.Mesh
    door_rightglass: THREE.Mesh
    chassistailLights: THREE.Mesh
    chassisglass: THREE.Mesh
    door_rightmirror: THREE.Mesh
    door_leftmirror: THREE.Mesh
    chassisheadLights: THREE.Mesh
    wheel_blcaliper: THREE.Mesh
    wheel_frcaliper: THREE.Mesh
    wheel_flcaliper: THREE.Mesh
    wheel_brcaliper: THREE.Mesh
  }
  materials: {
    body: THREE.MeshPhysicalMaterial
    parts: THREE.MeshStandardMaterial
    glass: THREE.MeshStandardMaterial
    wheel: THREE.MeshStandardMaterial
  }
}

type ActionName = 'wheel_blAction.003' | 'wheel_frAction' | 'wheel_flAction' | 'wheel_brAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

const FILE_URL = "https://dqeczc7c9n9n1.cloudfront.net/models/audi-1664906851/audi.glb.gz";

export default function Model(props: JSX.IntrinsicElements['group']) {
  
  const group = useRef<THREE.Group>();
  const {progress, objectQueued, objectRendered} = useStore(state => ({
    progress: state.progress,
    objectQueued: state.objectQueued,
    objectRendered: state.objectRendered
  }))
  objectQueued("sl190");
  const loaded = progress === 100;
  
  const {nodes, materials, animations} = useGLTF(FILE_URL) as GLTFResult
  const {actions} = useAnimations<GLTFActions>(animations, group)
  
  useEffect(() => {
    
    objectRendered("sl190")
    for (const action of Object.values(actions)) {
      
      if (!action) continue;
      // @ts-ignore
      action.setEffectiveTimeScale(1.25).play();
      
    }
    
  }, [actions]);
  
  const basicTransition = {
    duration: 2,
  }
  
  const carBody = new THREE.MeshStandardMaterial({
      color: "#FAFAFA",
      metalness: 1,
      roughness: 0.15,
      side: THREE.DoubleSide
    }),
    glass = new THREE.MeshStandardMaterial({
      color: "#3A3A3A",
      metalness: 1,
      roughness: 0,
      transparent: true,
      opacity: 0.95,
      side: THREE.DoubleSide
    });
  
  return (
    <group ref={group} {...props} dispose={null}>
      <Motion.group initial={{x: -7.5}} animate={{x: 0}} transition={basicTransition}>
        <group name="Scene">
          <group name="AUDI_R8glb">
            <group name="door_left">
              <mesh name="door_left_1" geometry={nodes.door_left_1.geometry} material={nodes.door_left_1.material}/>
              <mesh name="door_left_2" geometry={nodes.door_left_2.geometry} material={nodes.door_left_2.material}/>
            </group>
            <group name="door_right">
              <mesh name="door_right_1" geometry={nodes.door_right_1.geometry} material={nodes.door_right_1.material}/>
              <mesh name="door_right_2" geometry={nodes.door_right_2.geometry} material={nodes.door_right_2.material}/>
            </group>
            <group name="chassis">
              <mesh name="chassis_1" geometry={nodes.chassis_1.geometry} material={carBody}/>
              <mesh name="chassis_2" geometry={nodes.chassis_2.geometry} material={carBody}/>
              <mesh name="chassis_3" geometry={nodes.chassis_3.geometry} material={carBody}/>
            </group>
            <group name="chassisframe">
              <mesh name="chassis001" geometry={nodes.chassis001.geometry} material={nodes.chassis001.material}/>
              <mesh name="chassis001_1" geometry={nodes.chassis001_1.geometry} material={nodes.chassis001_1.material}/>
            </group>
            <group name="chassisinterior">
              <mesh name="chassis002" geometry={nodes.chassis002.geometry} material={nodes.chassis002.material}/>
              <mesh name="chassis002_1" geometry={nodes.chassis002_1.geometry} material={nodes.chassis002_1.material}/>
            </group>
            <mesh
              name="wheel_bl"
              geometry={nodes.wheel_bl.geometry}
              material={nodes.wheel_bl.material}
              position={[-1.3094, 0.3144, -0.8819]}
            />
            <mesh
              name="wheel_fr"
              geometry={nodes.wheel_fr.geometry}
              material={nodes.wheel_fr.material}
              position={[1.3196, 0.3144, 0.8983]}
            />
            <mesh
              name="wheel_fl"
              geometry={nodes.wheel_fl.geometry}
              material={nodes.wheel_fl.material}
              position={[1.3197, 0.3144, -0.8819]}
            />
            <mesh
              name="wheel_br"
              geometry={nodes.wheel_br.geometry}
              material={nodes.wheel_br.material}
              position={[-1.3096, 0.3141, 0.8982]}
            />
            <mesh
              name="door_leftwindow"
              geometry={nodes.door_leftwindow.geometry}
              material={glass}
            />
            <mesh
              name="door_rightglass"
              geometry={nodes.door_rightglass.geometry}
              material={glass}
            />
            <mesh
              name="chassistailLights"
              geometry={nodes.chassistailLights.geometry}
              material={nodes.chassistailLights.material}
            />
            <mesh name="chassisglass" geometry={nodes.chassisglass.geometry} material={glass}/>
            <mesh
              name="door_rightmirror"
              geometry={nodes.door_rightmirror.geometry}
              material={nodes.door_rightmirror.material}
            />
            <mesh
              name="door_leftmirror"
              geometry={nodes.door_leftmirror.geometry}
              material={nodes.door_leftmirror.material}
            />
            <mesh
              name="chassisheadLights"
              geometry={nodes.chassisheadLights.geometry}
              material={nodes.chassisheadLights.material}
            />
            <mesh
              name="wheel_blcaliper"
              geometry={nodes.wheel_blcaliper.geometry}
              material={nodes.wheel_blcaliper.material}
              position={[-1.3094, 0.3144, -0.8819]}
            />
            <mesh
              name="wheel_frcaliper"
              geometry={nodes.wheel_frcaliper.geometry}
              material={nodes.wheel_frcaliper.material}
              position={[1.3196, 0.3144, 0.8983]}
            />
            <mesh
              name="wheel_flcaliper"
              geometry={nodes.wheel_flcaliper.geometry}
              material={nodes.wheel_flcaliper.material}
              position={[1.3197, 0.3144, -0.8819]}
            />
            <mesh
              name="wheel_brcaliper"
              geometry={nodes.wheel_brcaliper.geometry}
              material={nodes.wheel_brcaliper.material}
              position={[-1.3096, 0.3141, 0.8982]}
            />
          </group>
        </group>
      </Motion.group>
    </group>
  )
}

useGLTF.preload(FILE_URL)
