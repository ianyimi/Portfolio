/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, {ForwardedRef, Ref} from 'react';
import {useGLTF} from '@react-three/drei';
import {GLTF} from 'three/examples/jsm/loaders/GLTFLoader';
import {useFrame} from "@react-three/fiber";
import {useLimiter} from "spacesvr";

type GLTFResult = GLTF & {
  nodes: {
    Mesh: THREE.Mesh
    Mesh_1: THREE.Mesh
    Mesh_2: THREE.Mesh
    Mesh_3: THREE.Mesh
    Mesh_4: THREE.Mesh
  }
  materials: {
    dbl_Layer0_001: THREE.MeshStandardMaterial
    dbl_Layer0_002: THREE.MeshStandardMaterial
    dbl_Layer0_003: THREE.MeshStandardMaterial
    dbl_Layer0_004: THREE.MeshStandardMaterial
    dbl_Layer0_005: THREE.MeshStandardMaterial
  }
}

const FILE_URL = "https://dqeczc7c9n9n1.cloudfront.net/models/bridge-1661142497/bridge.glb.gz";

// eslint-disable-next-line react/display-name
const Model = React.forwardRef((props: JSX.IntrinsicElements['group'], ref: ForwardedRef<THREE.Group | undefined>) => {
  
  const {nodes, materials} = useGLTF(FILE_URL) as unknown as GLTFResult;
  
  return (
    <group ref={ref as Ref<THREE.Group>} position={[0, -1.185, -0.65]} {...props} dispose={null}>
      <group name="Scene" scale={0.75}>
        <group name="Layer0_001" position={[0, 0.2399, 0]} scale={0.0254}>
          <mesh name="Mesh" geometry={nodes.Mesh.geometry} material={materials.dbl_Layer0_001} receiveShadow/>
          <mesh name="Mesh_1" geometry={nodes.Mesh_1.geometry} material={materials.dbl_Layer0_002} receiveShadow/>
          <mesh name="Mesh_2" geometry={nodes.Mesh_2.geometry} material={materials.dbl_Layer0_003} receiveShadow/>
          <mesh name="Mesh_3" geometry={nodes.Mesh_3.geometry} material={materials.dbl_Layer0_004} receiveShadow/>
          <mesh name="Mesh_4" geometry={nodes.Mesh_4.geometry} material={materials.dbl_Layer0_005} receiveShadow/>
        </group>
      </group>
    </group>
  );
  
});


useGLTF.preload(FILE_URL);
export default Model;
